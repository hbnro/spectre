#!/usr/bin/env php
<?php

declare(ticks = 1);

error_reporting(-1);
date_default_timezone_set('America/Mexico_City');

call_user_func(function () use ($argv) {
  $top_vendor = join(DIRECTORY_SEPARATOR, array(dirname(dirname(dirname(__DIR__))), 'autoload.php'));
  $this_vendor = join(DIRECTORY_SEPARATOR, array(dirname(__DIR__), 'vendor', 'autoload.php'));

  require is_file($top_vendor) ? $top_vendor : $this_vendor;

  $cli = new \Clipper\Shell($argv);

  $cli->colors->alias('debug', 'c:brown');

  $cli->params->parse(array(
    'showHelp' => array('h', 'help', \Clipper\Params::PARAM_NO_VALUE, 'Display this help'),
    'watchMode' => array('w', 'watch', \Clipper\Params::PARAM_NO_VALUE, 'Enables the watch mode'),
    'watchTimeout' => array('t', 'timeout', null, 'Timeout in seconds for watch mode', 'number'),
    'codeCoverage' => array('c', 'coverage', \Clipper\Params::PARAM_NO_VALUE, 'Enables code coverage instrumentation'),
    'filterSpecs' => array('f', 'filter', null, 'Filter for executing specific tests by name'),
    'excludeSources' => array('x', 'exclude', \Clipper\Params::PARAM_MULTIPLE, 'Folders and files to exclude from coverage', 'array'),
    'reportFile' => array('o', 'output', null, 'Custom filename for saving coverage report'),
    'reportOutput' => array('r', 'reporter', null, 'Default reporter for coverage. Options: JSON, TAP'),
  ), true);

  if ($cli->params->showHelp || (sizeof($argv) <= 1)) {
    $cmd = $cli->params->getCommand();
    $cli->writeln("\nUsage: $cmd [options] <folders|files>\n");
    $cli->writeln($cli->params->usage());
    $cli->writeln();
    exit(1);
  }

  \Spectre\Runner::initialize($cli);

  $callback = function () use ($cli) {
    $status = \Spectre\Runner::execute();

    if (!$cli->params->watchMode) {
      $cli->writeln();
    }

    exit($status);
  };

  if ($cli->params->getArray() && $cli->params->watchMode) {
    if (!function_exists('pcntl_fork')) {
      throw new \Exception('PCNTL is required for watch mode but is missing');
    }

    $timeout = !empty($cli->params->watchTimeout) ? $cli->params->watchTimeout : 1;

    $hashes = getcwd() . '/.spectre';

    if (is_file($hashes)) {
      unlink($hashes);
    }

    $kill = function () use ($cli) {
      $cli->quit();
    };

    $cli->main(function ($cli, $ticks, $duration) use ($kill, $hashes, $timeout, $callback) {
      $current_stats = join("\n", array_unique(array_map('md5', \Spectre\Runner::watch())));
      $previous_stats = is_file($hashes) ? file_get_contents($hashes) : '';

      if ($previous_stats !== $current_stats) {
        file_put_contents($hashes, $current_stats);

        $child_pid = pcntl_fork();

        if (-1 === $child_pid) {
          throw new \Exception('Could not fork the process');
        } else if ($child_pid) {
          pcntl_wait($status);

          pcntl_signal(SIGTERM, $kill);
          pcntl_signal(SIGHUP, $kill);
          pcntl_signal(SIGINT, $kill);

          $cli->printf("\n<c:light_gray>Press CTRL-C to quit.</c>\n\n");
        } else {
          $callback();
        }
      }

      $time = \Spectre\Helpers::secs($duration);

      $cli->printf("\r<c:dark_gray>Watch time: $time (waiting for changes...)</c>");

      sleep($timeout);
    });

    $cli->printf("\r\n");

    unlink($hashes);
  } else {
    $callback();
  }
});
